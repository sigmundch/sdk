// Copyright (c) 2015, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/// Server component to display [GlobalResult]s using a web app.
library compiler.tool.stats.server;

import 'dart:convert';
import 'dart:io';
import 'dart:async';
import 'package:path/path.dart' as path;
import 'package:args/args.dart';
import 'package:shelf/shelf.dart' as shelf;
import 'package:shelf/shelf_io.dart' as shelf;

const _DEFAULT_OUT_TEMPLATE = '<dart2js-out-file>.coverage';

main(argv) async {
  var parser = new ArgParser()
    ..addOption('port', abbr: 'p', help: 'port number', defaultsTo: "8080")
    ..addOption('host', help: 'host name (use 0.0.0.0 for all interfaces)',
        defaultsTo: 'localhost')
    ..addFlag('help', abbr: 'h', help: 'show this help message',
        negatable: false)
    ..addOption('uri-prefix',
        help: 'uri path prefix that will hit this server. This will be injected'
              ' into the .js file',
        defaultsTo: '')
    ..addOption('out', abbr: 'o', help: 'output log file',
        defaultsTo: _DEFAULT_OUT_TEMPLATE);
  var args = parser.parse(argv);
  if (args['help'] == true || args.rest.isEmpty) {
    print('usage: dart coverage_logging.dart [options] <dart2js-out-file>');
    print(parser.usage);
    exit(1);
  }

  var jsPath = args.rest[0];
  var outPath = args['out'];
  if (outPath == _DEFAULT_OUT_TEMPLATE) outPath = '$jsPath.coverage';
  var server = new _Server(args['host'], int.parse(args['port']), jsPath,
      outPath, args['uri-prefix']);
  await server.run();
}

class _Server {
  /// Server hostname, typically `localhost`,  but can be `0.0.0.0`.
  final String hostname;

  /// Port the server will listen to.
  final int port;

  /// JS file (previously generated by dart2js) to serve.
  final String jsPath;

  /// Contents of jsPath, adjusted to use the appropriate server url.
  String jsCode;

  /// Location where we'll dump the coverage data.
  final String outPath;

  /// Uri prefix used on all requests to this server. This will be injected into
  /// the .js file.
  final String prefix;

  /// Data received so far. The data is just an array of pairs, showing the
  /// hashCode and name of the element used. This can be later cross-checked
  /// against dump-info data.
  Map data = {};

  _Server(this.hostname, this.port, String jsPath, this.outPath, String prefix)
      : jsPath = jsPath,
        jsCode = _adjustRequestUrl(new File(jsPath).readAsStringSync(), prefix),
        prefix = _normalize(prefix);

  run() async {
    await shelf.serve(_handler, hostname, port);
    var urlBase = "http://$hostname:$port${prefix == '' ? '/' : '/$prefix/'}";
    print("Server is listening\n"
        "  - test html page: $urlBase\n"
        "  - js code: $urlBase${path.basename(jsPath)}\n"
        "  - coverage reporting: ${urlBase}coverage\n");
  }

  _expectedPath(String tail) => prefix == '' ? tail : '$prefix/$tail';

  _handler(shelf.Request request) async {
    var urlPath = request.url.path;
    print('received request: $urlPath');
    var baseJsName = path.basename(jsPath);
    if (urlPath == '$prefix') {
      return new shelf.Response.found('/$prefix/'); // redirect
    } else if (urlPath == '$prefix/') {
      return new shelf.Response.ok('<html><script src="$baseJsName"></script>',
          headers: HTML_HEADERS);
    } else if (urlPath == _expectedPath(baseJsName)) {
      return new shelf.Response.ok(jsCode, headers: JS_HEADERS);
    } else if (urlPath == _expectedPath('coverage')) {
      if (request.method == 'GET') {
        return new shelf.Response.ok(JSON.encode(data), headers: TEXT_HEADERS);
      } else if (request.method == 'POST') {
        _record(JSON.decode(await request.readAsString()));
        return new shelf.Response.ok("Thanks!");
      }
    } else {
      return new shelf.Response.notFound('Not found: "$urlPath"');
    }
  }

  _record(List entries) {
    for (var entry in entries) {
      var id = entry[0];
      data.putIfAbsent(id, () => {'name': entry[1], 'count': 0});
      data[id]['count']++;
    }
    _enqueueSave();
  }

  bool _savePending = false;
  _enqueueSave() async {
    if (!_savePending) {
      _savePending = true;
      await new Future.delayed(new Duration(seconds: 3));
      await new File(outPath).writeAsString(JSON.encode(data));
      _savePending = false;
    }
  }
}

/// Removes leading and trailing slashes of [uriPath].
_normalize(String uriPath) {
  if (uriPath.startsWith('/')) uriPath = uriPath.subtring(1);
  if (uriPath.endsWith('/')) uriPath = uriPath.subtring(0, uriPath.length - 1);
  return uriPath;
}


_adjustRequestUrl(String code, String prefix) {
  if (prefix != '') {
    code = code.replaceFirst(
        '"/coverage_uri_to_amend_by_server"',
        '"/$prefix/coverage" /*url-prefix updated!*/');
  }
  return code;
}

const HTML_HEADERS = const {'content-type': 'text/html'};
const JS_HEADERS = const {'content-type': 'text/javascript'};
const TEXT_HEADERS = const {'content-type': 'text/plain'};
